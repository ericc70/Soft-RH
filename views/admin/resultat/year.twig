{% extends "base.twig" %}
{% block content %}

    <span class="burger d-flex w-100 justify-content-end"><i class="fas fa-2x p-3 d-flex d-sm-flex d-md-none d-lg-none fa-bars"></i></span>
  <div class="col-12 text-center mt-3">
    <span class="displayDate font-weight-bold text-uppercase"></span>
        <p><img src="/public/medias/legend.png" class="mt-3"></p>

    </div>
		
			 {% for i in 1..4  %}
             <div class="chart-container container-fluid d-flex flex-wrap col-12 col-sm-12 col-md-6 col-lg-6 mt-5 " style="position: relative;">
                <canvas id="{{i}}"></canvas>
                
         </div>
            {% endfor %}
    
		


    	

		<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
        <script>
         
         
        {% for i in 1..4  %}
        
   
      
   
        var ctx = document.getElementById({{i}}).getContext('2d');
        
         
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                
                labels: [`Département{{i}}`],
                datasets: [
                    {
                    label: 'Heureux',
                    
                    data: [{{ results.humeur1[i-1] | json_encode()}}],
                    borderColor: ['rgba(19, 205, 94, 1)',],
                    backgroundColor: ['rgba(19, 205, 94, 1)',],
                    pointBackgroundColor:['rgba(19, 205, 94, 1)',],
                    borderWidth:[4,],

                    
                },
                {
                    label: 'Fatigué',
                    data:  [{{ results.humeur2[i-1] | json_encode()}}
                    ],
                
                    borderColor: ['rgba(225, 214, 35, 1)',],
                    backgroundColor: ['rgba(225, 214, 35, 1)',],
                    borderWidth:[ 4,],

                },
                {
                    label: 'Stressé',
                    data: [{{ results.humeur3[i-1] | json_encode()}}],
                    
                    borderColor: ['rgba(255, 72, 124, 1)',],
                    pointBackgroundColor:['rgba(255, 72, 124, 1)',],
                    backgroundColor: ['rgba(255, 72, 124, 1)',],
                    borderWidth:[4,],
                
                }
                ],
            },
            
            options: {
                
                legend: false,
                
                scales: {
                    yAxes: [{
                        stacked: false,
                        
                        
                        ticks: {
                            beginAtZero: true,
                            type: 'myScale' // this is the same key that was passed to the registerScaleType function
                        }
                    }],
                    xAxes: [{
                        ticks: {
                        }
                    }]
                }
            }
        });
{% endfor %}
        </script>
{% endblock %}
